POSS - Parts and accessories Online Shopping(Store/Selling) System

===
1210:
Shopify:

Pricing――27、79、299USD per month's difference:
- Staff accounts 2->5
- gift cards、
- reports
- shipping rates calculating (whether 3rd party rates calculator)
- shipping discount: 31-37-40%
- Credit card fee:
Canadian credit card                         2.9% + 30￠     2.7% + 30￠     2.4% + 30￠
International/Amex credit card          3.5% + 30￠     3.4% + 30￠     3.3% + 30￠
Additional fees using payments other than Shopify Payments             2.0%     1.0%     0.5%
- POS

NewProduct
- SKU&barcode
- pics
- weight (for shipping)
===
===
1.平台比较Platform comparision
2.平台售价
3.大致需要的参数
4.需要确定的参数、也包括需要出售的商品
5.需要做的工作与分工
6.时间线的估计

1.平台比较：
- Shopify
- Magento
太臃肿、功能过多用不上、运行速度慢、安装配置繁琐、bug多、成功率太低
- Opencart
- Sylius
- GoDaddy
和shopify一样是闭源的、但功能要少很多、有点儿太简单

开源的好处都有啥？
- 可以和仓库系统整合、大大减轻工作量、提高效率（否则不仅每次添加新商品需要一个一个手动录入、就是商品的库存产生变化也要一个一个手动录入和核对）
- 页面想改就改、自由度更高
- 成本更低、虽然仍需hosting、但在我们的这个情形其实可以用原有的hosting等于没有月费

2.
shopify monthly fee 39-105-400 CAD
opencart hosting basic12（9） plus17（12）perMonth

3.大致需要的参数：
- Name
- Desc
- Tags 《--
- Model (also named "productCode" in productPage, is the model name with letters and digits)
- SKU/ISBN/...
- Price 《--
- Quantity (remaining qty) 《--
- Dimension 《--
- Weight 《--
- Category 《--
- Manufacturer 《--
- Related product (asso part) 《--
- Option (sub-items with seperate price and qty, variant) 《--
- Images 《--
- *Spec (called "attribute" in system) 《--
- *Tax policy

4.需要确定的参数、也包括需要出售的商品
参数：在上面用“《--”标记


5.需要做的工作与分工
- hosting
*实验怎样隐藏文件夹
- theme、首页美化、其他非商品页面（contactUs、aboutUs等等）
txt和img
- 录入商品
- 采集图像（照相）、desc
- 开会 确定很多参数怎么设 与更多讨论
- 开会 培训员工使用

6.问题 Questions
- 销售的品类。是否所有parts都放上去？  SKU for selling, are all of our parts for sale?
- 库存是否少写一些？（预留一些）  Remaining quantity, do we set a smaller qty (so that to spare a little more for our own consumption)?
- 价格 Which price to list? wholesale or retail?
- 有哪些信息是不能放上去的 / 要小心的？

7. 时间线：上线大概需要1、2周，开发完需要2、3周
调研
config、modify & dataEntry
dev to migration function etc

*7.shopify的商品参数：
- Title
- Desc
- Price(final)
- Price(compare at) (cross out price)
- Price(cost)
- SKU
- Barcode etc.
- Qty
- Weight
- Variant系统（和option系统类似）
- Collection, type和tags （和category有点儿像）
===
1.平台比较Platform comparision
2.平台售价
3.大致需要的参数
4.需要确定的参数、也包括需要出售的商品
5.需要做的工作与分工
6.时间线的估计

1.平台比较：
- Shopify
- Magento
太臃肿、功能过多用不上、运行速度慢、安装配置繁琐、bug多、成功率太低
- Opencart
- Sylius
- GoDaddy
和shopify一样是闭源的、但功能要少很多、有点儿太简单

开源的好处都有啥？
- 可以和仓库系统整合、大大减轻工作量、提高效率（否则不仅每次添加新商品需要一个一个手动录入、就是商品的库存产生变化也要一个一个手动录入和核对）
- 页面想改就改、自由度更高
- 成本更低、虽然仍需hosting、但在我们的这个情形其实可以用原有的hosting等于没有月费

2.
shopify 39-105-400 CAD
others free

3.大致需要的参数：
- Name
- Desc
- Tags 《--
- Model (also named "productCode" in productPage, is the model name with letters and digits)
- SKU/ISBN/...
- Price 《--
- Quantity (remaining qty) 《--
- Dimension 《--
- Weight 《--
- Category 《--
- Manufacturer 《--
- Related product (asso part) 《--
- Option (sub-items with seperate price and qty) 《--
- Images 《--
- *Spec (called "attribute" in system) 《--
- *Tax policy

4.需要确定的参数、也包括需要出售的商品
参数：


5.需要做的工作与分工
- hosting
    *实验怎样隐藏文件夹
- theme、首页美化、其他非商品页面（contactUs、aboutUs等等）
txt和img
- 录入商品
- 采集图像（照相）
- 开会 确定很多参数怎么设 与更多讨论
- 开会 培训员工使用

*6.shopify的商品参数：
- Title
- Desc
- Price(final)
- Price(compare at) (cross out price)
- Price(cost)
- SKU
- Barcode etc.
- Qty
- Weight
- Variant系统（和option系统类似）
- Collection, type和tags （和category有点儿像）
===
Magento php.ini (opencart 也用得上)：
php.ini settings for magento (other opensource platform also benefit)

has to be php7, below all in php.ini in php7
extension_dir = C:/xampp/php7/ext
extension=php_gd2.dll
extension=php_intl.dll
extension=php_xsl.dll
extension=php_openssl.dll
extension=php_curl.dll
extension=php_mbstring.dll
extension=php_pdo_mysql.dll
extension=php_soap.dll

http://localhost:8056/magento_local/
admin_1wcorj

all the "advanced options" in the step 3 web config..

agtecars
admin1
jasonzhang5195@gmail.com

; max_execution_time = 30  zz
max_execution_time = 360000

; max_input_time = 60 zz
max_input_time = 18000

; memory_limit = 128M zz
memory_limit = 1024M

agtEcars123
===
Learn opencart:

ctrl flow front-end:
index.php (/index.php or admin/index.php --front or backend)
    include config.php (all the CONST) (/config.php or admin/config.php --front or backend)
    include startup.php (same for both front&back: system/startup.php)
        error_report, checkPHPVer, check SSL, timezone etc.
        define modification function(see note1) <<--1
        include auto-load file(see note2) <<--2
        define library function for autoload(see note3) <<--3
        call PHP spl_autoload_xx() to do the php autoload for library <<--4
        include engine files(using modi func to get cache ver file if possible)
        include helper files(no modi masking any more just direct include)
        define start() (which just include framework.php) (same for both front&back: system/framework.php)
    run the start() function(including mentioned framework.php), pass which module to run (backend or frontend)
        instansiate Registry obj (just an assoc array and its get/set)
        instansiate Config obj (same as registry, just add a load func) <<--5
        inject 'default' sysConfig settings
        inject 具体模组's（admin或者catalog等等） SYSConfig settings <<--6
        registery the config obj (store it into registry)
        instansiate and register a log obj <<--7
        call PHP set_error_handler(), set its handler and reaction
        instansiate a new event obj and registery it. what is event & action class?<<--8
        register some events into the event obj, these are 'action_event's defined in corresponding sysConfig <<-9
        instansiate  and registry a Loader obj (note: the regi key is 'load' not 'loader')<<-10
        instansiate  and registry a Request obj  <<-11
        instansiate  and registry a Response obj  <<-12
        

- 1: modification function: 给定一个原始文件的绝对path（一般按分类会在front-end back-end install各自的总文件夹里），会去找storage文件夹的同样子路径的位置是否有这个文件（应该是个copy或者cache）、有的话return这个文件的path、否则return给定的原path（原始文件的path）
- 2: auto-load file: too heavy this file -- not to read at the moment
- 3: 基本上也是个includer、会把输入的叫做$class的变量、里面的'\\'换成'/'，接到library的path中，看library中是否真的有此文件，有的话就用modification func modi一下（也就是用storage中的cache替换一下如果可以的话）、再include这个library文件，是在找不到的话就return false。。
- 4: PHP的autoload功能：基本就是帮忙include Class的，可以通过只class名就自动include定义class的源文件（从而载入这个class），用法是首先定义个针对某类class的search path、上面note3的这个library正是干这个的、再用spl_autoload相关工具链到自动加载功能里（？）从而下次就不用include了（？）
- 5: load func: 将这个SYSConfig文件里的诸fields(诸arrayElement) append至本config obj的'data' array ppty中。。如果出现fieldName重名则将原本的覆盖。。 inEnglish load this sysConfig file (auto-complete the input nature file name and include it.. path=system/config/, extension=php)into config obj, so that inject the file's data into n assoc array which append to  config obj's data
- 6: here $application_config as a nature fileName is prepared in the beginning, very early when index.php is calling function start()
- 7: log file's location is according to 'error_filename' entry of the 'default' sysConfig as its natureName and DIR_LOG of configFile as its path-- usually always storage/logs
- 8: event class: engine的一部分
ppty: $registry(the main registry past to here), $data=array[] (storing a list of events)
methods:
             'register': 3params, str $trigger, actionObj $action, and an int $priority. register an evnt into the 'data' array ppty and sort the whole array by priority.
             'trigger': match the input string 'event' with the existing, stored string 'trigger's for every entry of 'data' property (that is every single event), if a match is found, call the 'execute' method of the action in that entry and return the result
注意一次methodCall是可能trigger多个action的，只要前面的action在exe时return null甚至throwExcept，就都不会发生method中断，下面如果还有相符的entry也能触发。。
              'unregister' and 'clear': if both trigger and action's route match then unset the event entry
or just unset the event entry if just trigger match
- 8': action class: engine的一部分
construct: seems it differentiate the 2 types of route: calling a file & calling a method (for method, seems it only takes the final part of the input $route)《--更新：其实是同一种route--同时包含了ctrlr文件path和method名，同时运用while和array_pop来同时赋给method和找到文件path的方法正是精妙之处（学习）》
     assign $this->route或$this->method accordingly
     assign $this->id to the input $route..
     对输入的route首先是去掉所有除了字母数字和"_"、"/"之外的所有特殊字符，再按"/"炸开成array
execute: 这里仍然没看懂，好像只有对“route”type的应对而没有对“method”的。。虽然下面也用了method但似乎仍会先出excep《--更新：由上面的更新，method和文件path是可同事都有的，在根据这里的代码、看来method名和文件path是肯定都需要的都必须有的，那么ctrlrClass的obj也能顺利生成。再就是下面的reflectionClass，其作用是get这ctrlrClass的megaData来判断是否有此method、param数量等等。最后的call_user_func_array()就是用于动态invoke method和隐藏signature的、一起来完成本次的ctrlrMethod invoking（动态）》

- 9: 'action_event': some events defined in corresponding sysConfig, to pre-load by framework.php during init
     结构 'action_event' = {
     'key1' => {999 => 'action1', 1000 => 'action2'},
     'key2' => {'actionxxxx'},
     'key xxx' => {},
     ...
     }
     assoc array inside assoc array, 其中的数字是priority，key xx和 action xx都是某种具体的str，就是register event时用到的$trigger和$action
     对于这些具体的events还得等到后面都懂了才能分析
- 10: 'Loader' class: engine的一部分，有几个methods：《--注意这个就是我们第一次在ctrlr文件中看到的那个$this->load->xx中的‘load’，是framework里registry obj的预存的loader obj》
     ctrlr($route, $data = array())  《--loader.php 47行这儿没太看懂，怎么同一个route又能给event做trigger又能新建个action做exe？（用作         trigger的变量和constructAction的变量确实有所不同、至少从已知的来看$trigger是类似于key、甚至如wiki所说是个fileLoading或                     methodCalling、但和action的route绝对不同、action这个是具体要执行什么 一般来说都是和event本身两回事的）》
         之所以叫MVC可能就是用于具体MVC class中的methodsCalling的wrapper？
         本method主要就是有个trigger pre events和post events，在中间还有可能直接执行用trigger作为route的action（只要pre们不return东西），虽然pre和post都只各有一次call trigger()，但由于一次trigger是可能触发多个event entry的所以叫pre-events等。trigger str本身也需注意其一定是前缀ctrlr、后缀before或after的
     model($route)  对model的loading有些不同，他首先是把输入的route中所有斜杠改成下划线并加上前缀model_、看registry中是否有这个（也就是看有没有load过），没有的话才会1).找到并include route所代表的那个model文件（在当前模组的model文件夹）、做一个那个model文件中定义的那个model class的一个proxy（用engine中的ProxyClass）（这个modelClass恰好也和route有相似的名字--相当于把斜杠去了加上Model前缀）、并将proxy存入registry。。之所以用proxy据作者说好像是为了override model、而且据说用到了magicMethod
     view($route, $data = array())  view这部分好像和ctrlr有些类似、都会trigger些pre和post events、不同的是ctrlr中间可以直接执行用trigger作为route的action、view这边则是俨然在templating和renderingView的样子。。那个叫‘templateEngine’的，其实就是一个str叫‘twig’。。
另外也同样是只有pre这部分没有return东西才能执行到template这部分、否则直接跳到post了。参数用途--$data可以用来给template传递data（参数）这点和laravel一样非常好用、$route则一般就是template的全path、本来sysConfig可以再设置个templateDirectory不过一般都是为空。
在template在render时还会pass个'templateCache'，是个bool，是指。。
     library($route)  load-library和model有点儿相似、都是include文件和储存文件中class于registry，不同之处在于library不用check是否已经registry了（是否曾经发生过load）、再一个是不需proxy、再一个是对应class的命名也略有不同（没有前缀而且route如果有子目录还要用\来代替route的/出现在class名中？）
     helper($route)  非常简单直接include文件
     config($route) 
     language($route, $key = '')
     callback($registry, $route)  (这个是protect method)
- 10': overLoading & magicMethods in PHP: 这部分是PHP自带的、其解释了一些我们原本不理解的关键的地方
似乎就是能够自动的生成ppty、不需手动定义所有ppty名、只要定义个叫‘data’的assoc array、以及（关键）一些叫'__get' '__set'之类的methods，则不论定义生成ppty还是access ppty都可自动完成。。连assoc array的extract()都省了。。
知道了这个之后，那么多的'$this->load->xx'就好解释了。。这个load其实就是定义在framework里的总registry obj里的总loader obj
- 11: Request Class：
就只有$get, $post, $cookies, $files, $server几个ppty和一个clean() method,
这几个正是常见的$_GET[]等等、在construct时就pull下来set好了，所以$_GET['xx']应该可以直接用$get['xx']代替
不同之处在于设定时用了那个clean方法、好像是把所有的key、value都改成――特殊字符要进行html化、例如'>'改成‘&gt;’之类
- 12：Response Class：mainly for setting http header (note: not html head) & wrap returned rendered html code (http body). 另外在framework init 这个response时也add a common httpHeader (COntent-type etc) and set gzip compress level (这边没看懂，好像实际没有set成功，没有这个config。。)
fields:     headers(array)-- every element is a http 'header' and all consist the "http headers" which will be send to client with response, "http headers" includes additional info server gives to client such as content-type or redirect-new-location(use 'location').
            level(int)-- level for compression (encoding) for gzip tool, 0-9 0=nonCompress
            output(str) -- final response output
methods:    addHeader($header)-- add a header to headers array
            redirect() -- use the 'location' header to redirect, some html chars (&amp;等等）in entered string are cleaned, also can explicitly set return status (with a default 302 standard redirect)
            setCompression() -- set ppty 'level' for later compression
            output getter & setter--
            compress() -- a private method to do the compression, using gzip to compress the input data (即output)
            output() -- return final response to client (like a html code wrapper to play with httpHeaders), will use compress() to compress $output (即httpBody), also send the headers first.
- DB Class & Mysqli (adapter) Class: DB Class is just a wrapper, or interface kind of. All real functions stored inside adapter classes, based on what kind of DB is used (mysqli mysqlpdo prestoSomething ...)
By default mysqli is used for most pages, this is set in 'db_engine' in many configs.
MySQLliClass: (DB Class has same name methods..)
ppty:    $connection -- private
methods: constructer --
         query(sql) --
         escape(sql) --
         countAffected() --
         getLastId() --
         conenected() --
         desctructer --
         


Learning - opencartGithubWiki - Basics, Events, Events 2.0&2.1
- MVC: seems the author made models only for database related and put the logics in ctrlers (好像model只负责data和database、而logics在ctrler中)
- Loading: 2ways to access ctrler, path matching, "code loading"
- event: seems the authors logic is to use events as a way to add some code when events such as method calls and data flows happening, hooks to call before/after events happen, manipulate input/output
- event registering:
    "$code": string id for the extension,usually "authorName_extName", 据说在用户删除插件时用得上、来删除event
     "$trigger": a flexible call, can be made to ctrler or model, view, or language or config file etc many things.
         看起来event就是由fileLoading或者methodCalling作为其trigger的，如上所述这么些file或者method都可以、而$trigger就是记录具体触发者的一个string。。
         trigger可由很多部分组成 application、type、folder、file、method、beforeOrAfter
         其中application指的是catalog还是admin、type指的是(M还是V还是C、L还是Config等等) 、method指的是（主要是ctrler和model用method、其中model一定要用到method）、beforeOrAfter指的是（相对于这些file的load或methodCall，event的触发位置）
     "$action": 具体的action一般放在某个ctrlr中、这些具体的代码可用来处理route、data、loadMVC等，而actionObj（也就是这个$action）就是提供链至这具体action代码的route的――route放在actionObj的constructor中（但在3.x中好像这个route也是要pass过去的。。还是得看具体是怎么用的）
- event deleting:
$this->model_setting_event->deleteEvent('my_theme');
不知为何他经常提到用户自建extension、这里的eventDeleting也是讲“在你uninstall你的module时需要delete所有regitered events”
- event using:
在具体使用上他只提到一个、具体action是可以return data的、如果returnData “it will stop any other event actions that are set to be called”。。
而似乎action还可以有两个输入：route指定具体的action ctrlr的位置（？）、还有个data 

note(总):
- nature name = name without path and fileExtension etc.. short name
- sysConfig file= system/config/xx.php (inject or append给Config obj的，也是一些setting但通过obj ppty array的形式)
config file= admin/config.php或者/config.php (拿来直接就用的、里面有一些CONST)
- register vs registery
register是Event class的一个method，用来装载一个具体event至Event obj的event列表（也就是其‘data’ ppty）
registry 是另一个class ‘Registry’或其obj，就只有一个array ppty，用来一条一条的储存framework里各个主要的功能模块（功能objs）
- string中常出现的'\\'，例如 “$class = 'DB\\' . $adaptor;”，其实就是用来生成和标注path的，向这里的$class代表的就是‘DB/adaptor’这个含路径的文件名str。另外就是用到了下面的：
- PHP auto class naming

temp：
(base on front-end or back-end)

TODO
看完loader、再看一些tutorial文章、然后还需要实际动动手了theme啊小的实验啊等等
===
- 总结：
    - 一个就是文件path系统、对绝对path的manipulate
    - 一个是怎样load（include）和管理这些class和文件
===
工作：
- 随时实际使用系统、来熟悉、并发现尚未发现的问题
- 随时继续hack系统、读代码
     - 看官方YouTube那个create ext的、以及其他create ext、create theme
     - 读文章、还有好多待看的呢
    

- 试着改一改原theme或自制扩展theme包（尽量少花时间）D
- 使用 成品theme D
  着手修改成品theme为最终版本（关键）
  整理需要的资源的需求（包括普通资源和逻辑资源--除了图片之类的也包括是否需要打折特价、怎么安排featured latest、怎么布局等等） 
- 安装payment和shipping
- 上传服务器（time consuming）
- 购买 安装"Different Prices By User Groups" 扩展包
- more programming works:
     - contact us form not sending..
     - add payment info, shipping info, delivery info(delivery time) & *return info on product page (just informative not a btn)
- 查 学习 其他兄弟网站的例子 例如ez-go的parts网站、madjax、ford authentic parts 。。。
- 工作 for others:
     - shipping? payment? include return info?
     - 申请快递account (ups fedex)
       paypal 公司acc
     - 最终theme外观？
     - remaining qty already hidden (Availability: In Stock)
     - product detail page都显示那些信息？现在是barcode
     - tax，是否应用tax？是否在产品页面显示
     - related product、product options
     - *rewardingPoiint Sys
===
sys - settings - general:
- Meta Tag desc:
- Meta Tag Keywords:
- use sll: set 'ssl url' in config files
- use shared session
- site logo (home)
- site favcon
- 

contents:
- txt:
     - terms & conditions ("I have read and agree to the Terms & Conditions" at checkout)
     - "order successfully placed" msg after success checkout
     - store details (about us/contact us etc)
     - success msg on success submit of contact form (route=information/contact/success)
     - footer: last line (copyright..)
- img:
     - parallex background -- 1.product大合照+offer; 2.文青桌面+用户反馈
     - offerBanner homePage

- whole page:
     - about us
     - delivery info
     - private policy
     - terms & conditions
     - newsletter subscribe page
     -
- logics & campaigns
     - 'services' section on home page -- free shipping, customer support, easy return, daily gift
     - *gift card sys
     - *coupon sys

- fonts:
    - https://www.codeofaninja.com/2017/02/create-simple-rest-api-in-php.html#top
     《--标题Varela Round，文字Varela Round，代码Monaco, "Consolas", Courier New》
    - https://www.gmpartsdirect.com/
     《--标题Rubik加粗，文字Open Sans》
    - https://mazdashop.ca/

re-design:
- brand system (since we only have one brand AGT)
-
===
product/product - main price D
product/product - relate item's price D
product/search D
product/special D
product/category D
product/manufacturer/info D
product/compare D

extension/module/featured
extension/module/bestseller
extension/module/special
extension/module/latest

account/wishlist

search key word:
line-through
price-old
<strike
===
$this->customer在比方说frontend的ctrlr里都可以随便call的、就是当前登录的用户，这个东西是压在registry里的（$this->registry），是在最开始boot frontend时，进行到startup/startup这步时压进去的，其中的new Cart\Customer在library里、Cart指的是namespace、这里会在construc时pullFromSession。startup/startup这步是framework里就定义的、由sysCfg定义好的pre-action里的其中一员。

先直接hardcode add一个新纪录
研究怎么restful
hardcode restful
oo restful
admin restful
*extension restful

===
deploying to server:

- related files located at E:360downloads/11Poss proj/11 deployToServer
- using zip file is much faster for large amount of files uploading (such as open cart 4000+files for main, 1400 files for storage)
- to unzip: cpanel->file->fileManager->extract btn
has to be zip file instead of rar
- database need to be created at cpanel->db->mysql db and assigned user there
- DB hostname = localhost, port = 3306
===
- 随时实际使用系统、来熟悉、并发现尚未发现的问题:

- 图片这个确实有点儿小坑，第一张图片是list page, search page & default img in detail page. 但第二张图开始才是“图片组”里的第一张、点了之后就完全看不到原来那个第一张图片了（只是个封面）
- option这些显示不了剩余数量（但是数量为0时能正常隐藏――这个真不错~）
- discount & special: discount是购满xx件打xx折、special是直接打xx折
- 那个option一开始还不会用--那个是和attribute一样、要先建option本身entity 的