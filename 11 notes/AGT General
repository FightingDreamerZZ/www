General TTD：
- 快速生成warehouse系统的各种文档、尤其进度和req，不管最后是不是po到共享文档、现在看来手里准备好都是非常必要的了。
用户手册文档
文档——改装相关
- 企划书：Dealer交互式mobile order system
- 串逗：invoice系统
- 改装相关——买电压表
- Otto：改装新思路：小冰箱、前雪铲
===
homepage website requirements and tasks:
- 将所有的诸如cricket-2.php之类的字眼、页面、链接统统改成和新名字相符的（hobbit-2g.php）、cricket4和6也是
- argo系列有个图片资源更新了、帮忙上传到服务器
===
0611
Website issues currently have:

    Mobile: background img doesn’t fit /shrink to container
    Mobile: menu items’ behavior doesn’t fit mobile – while it still sticks when clicked, as it is now vertical, the items after the clicked one will be pushed down, and hard to reach / less intuitive
    PC and mobile: there is no scroll if the screen size is smaller than the container of the first lvl expansion of menu nav

===
0612
website新发现问题：
- 没有logo（icon、rel=icon）

website新想法：
- add video
-

- index jump
- login
- index/panel
- add new part
- searchByBarcode(view_part.php)
- partsDetails(view_part.php?barcode=xxxx)
- searchByName(search.php)
- transactionList(trans_list.php)
- stats(stats.php)
transTraceSection: byMonth/Quarter/Year/Total
total trans, car trans(in,out), part trans(in,out)
-
partsInventory(?list all parts)
storage(??)

概念：
- trans（trabnsaction？）一次入库或出库吗？
- otto's cart
- stock warning 功能？
- same location其他零件search
- “warning”field到底是啥？“inStock”应该可以和warning一起、来触发shortage条件吧？“bin”中的part
location的整个设定怎么样？
- add new part其他fields有没有不合理的、depart/arrive有没有对fields的要求
empty(??)
disabled part(??)

X:\John\Computer
E:\Warehouse System

需求-warehouseSys
- barcode查询能够更智能（包括模糊查询和autoComple），现在的search（按名字smartSearch）已经很好了有模糊查询suggestion
- 更强的统计功能、哪种零件消耗得多、哪个季节消耗的多、历年比较（历史趋势）。。
（现有的只能统计一段时间（月季年总）入库总量、出库总量）
- outOfStock推送
- trans的时间查询（“从18年1月到18年6月的所有trans”）
- 分类、快捷键、优化

需求0619：
- search页，一上来的dropdown，entity“part”上移到“car” 上面
- Add new part页，整个location系统（仓库位置field）重做，至少给对仓库不熟悉的人也能非常直观地使用
- Add new part页，“For”域可以去掉了（本意是有些件是其他厂牌也可以通用的、但实际意义不大）
- 首页，disable系统重做：disable系统的本意是，由于barcode是唯一的，生成之后就跟着这个part一辈子了，这样如果这个part不再用了、或者有同样的part进货了但是是不同的barcode、需要删除这个part时就只能通过这个disable系统、把warningQuatity设定为-1，这时不管是搜索还是全局就不会显示这个part了
- depart页：添加field：“用途”，可以写明这个part是干什么用了（卖给终端用户、卖给dealer、我们自己修车消耗了、我们自己装车消耗了）
- depart页：“associate”域、可以再研究研究，它的用途就是例如一对门把手有四个螺丝、但实际使用时剩下1只把手3个螺丝，这种情形“associate”域就可以告诉我们剩下的配套的part的情况了
- page title等：“Elaine”
- 各个page title没有反应出本page是哪个

想法--关于warehouse系统、未来的想法：
- 添加mouse hover显示详情
===

Add an email account using advanced setup - Outlook Microsoft Official Support (28) AGT Electric Cars - Home New Tab Hobbit 2+2 | AGT Electric Cars html - Making a div vertically scrollable using CSS - Stack Overflow PHP support in Webstorm – IDEs Support (IntelliJ Platform) | JetBrains Installing, Updating and Uninstalling Repository Plugins - Help | WebStorm html relative path - Google Search HTML File Paths Relative path in HTML - Stack Overflow javascript - What does "./" (dot slash) refer to in terms of an HTML file path location? - Stack Overflow


javascript fadeOut - Google Search yorkbbs 做个网站 多少钱 site:forum.yorkbbs.ca - Google Search 如果做一个网站连论坛，要有动态效果，连空间 域名等一共需要多少钱？还有每年需要多少钱？ - 电脑科技 - 约克论坛 - 加拿大多伦多 网站制作收费问题 - 电脑科技 - 约克论坛 - 加拿大多伦多 外贸网站制作，问得最多的一个问题：做个网站多少钱？ - 商业交流 - 约克论坛 - 加拿大多伦多 what is seo - Google Search 加拿大建个网站要多少钱阿 - 欢乐灌水 - 约克论坛 - 加拿大多伦多 PHP 5 Installation MAMP & MAMP PRO - Downloads Elaine Warehouse Gotex AGT Electric Cars in Canada

===
存在意义方面，（关键字：存在的意义）
改公司主页（为一般人也能修改其内容的、其他各种小问题）、
改仓库系统（零件号码的智能查询、添加一定的统计分析能力、重做部分系统和数据库、系统优化、针对整车的处理）、
后面（装车、维修电路、打杂、仓库系统录入）、
开发masterList车辆系统
*开发“所有信息”统计系统
？开发CRM、货运公司、代理商？

ERP vs 单纯Excel：
- ERP可以整合资源、更加规范业务流程、对数据进行统计分析、
“成本核算自动化，实时报表统计及月底结帐瞬间完成”
“规范管理流程、财务业务一体化衔接”

CRM：
- 这些例子很不错：
Zoho CRM Demo
https://mopinion.com/best-crm-software-for-small-businesses-smb/


0628
想法
- 为了存在意义、为了找活、得有一定的“用户需求分析”能力、注意这不仅指的是调查用户的现有需求、更指“深度挖掘”用户到底缺什么、需要什么甚至“教会”他们去需要什么。。例如可以缩短办公时间的某个小程序、解决某个问题的小程序等等
《--总结教训，需求分析一定要具体。。到底。。一定要多开会呀尤其一开始时。。
-

下一次的需求会、可以针对“Excel文档”的电子化。
照一下装车的出货单
===
0627
想法：
- “一段时间（例如全年内）零件消耗数量排序”--“历年零件消耗数量排序”
“月内零件消耗数量排序”--“历月”。。
一上来就有的“全部零件消耗总数@本月/本季度等等”和“往年同一时段零件消耗总数” --可看出趋势、对车子销售更明显
-
汽车 销售 可视化数据 - Google Search

- trans页：进一步的filter例如找出和john有关的trans并按时间降序排列、或者找出所有某前桥有关的trans
- price：给parts表添加price栏、“净价值排序”
- 数据挖掘、大数据
- 难度：“做了一半、很多都没完成”
缺少用例啊。。缺少具体的新功能的需求、ideas等等
===
0628
想法
- 为了存在意义、为了找活、得有一定的“用户需求分析”能力、注意这不仅指的是调查用户的现有需求、更指“深度挖掘”用户到底缺什么、需要什么甚至“教会”他们去需要什么。。例如可以缩短办公时间的某个小程序、解决某个问题的小程序等等
-
===
0702
speaker:
- golf cart speaker - Google Search s-l300.jpg（JPEG 图像，300x225 像素） Pics From CES and some pics of my new sound system - BMW M3 Forum.com (E30 M3 | E36 M3 | E46 M3 | E92 M3 | F80/X) Stretched Limo Golf Carts Gallery Golf cart accessories wholesale to dealers 2015 EZGO L6 Hydrotuned! - HydrotunesHydrotunes Golf Cart Audio "Upgrade" Features Over 3000 Watts of Power Google Image Result for https://i.pinimg.com/originals/e6/35/01/e6350105a86e7868bd49627a2e9fe170.jpg RDINFC-T-3.jpg（JPEG 图像，550x367 像素） Amazon.com: Custom Golf Cart Speakers EZ GO Club Car Yamaha Radio Stereo Pods: Automotive Amazon.com : Custom Kicker Golf Cart Speakers EZ GO Club Car Yamaha Radio Stereo Pods : Sports & Outdoors Amazon.com: Golf Cart Double Speaker Cans EZ GO Club Car Yamaha: Automotive
===
在richmondhill、找guitarStrSize16 & violin rosin》Cosmo Music - The Musical Instrument Super Store! - Google Maps

电热切割用2弦12v》吉他弦的问题。 - 电动遥控固定翼-5iMX.com 我爱模型 玩家论坛 ——专业遥控模型和无人机玩家论坛（玩模型就上我爱模型，创始于2003年）

选16号的基本就是2弦的--电热切割》新手吉他選購指南 (四) 如何挑選吉他弦？ – 吉他好朋友

钢丝锯 叫coping saw、另还有电锯jig saw什么的》HUSKY Husky Coping Saw | The Home Depot Canada


===
0703
"gotex":
- wrong icon for homePage
- wrong content at beginning -- burlington should -> richmond
- no linkedin page
- no facebook page

===
dollarama file folder、glues、black paint、guitar string
===

https://www.amazon.ca/AmazonBasics-2-0-Channel-Bluetooth-Sound/dp/B01EK7TEL4/ref=sr_1_6?s=electronics&ie=UTF8&qid=1530734556&sr=1-6&keywords=sound%2Bbar&th=1&psc=1

https://www.amazon.ca/VIZIO-SB2820n-E0-28-inch-Sound-Speaker/dp/B06XTD2PTB/ref=sr_1_8?s=electronics&ie=UTF8&qid=1530734556&sr=1-8&keywords=sound+bar

https://www.amazon.ca/MindKoo-Bluetooth-Soundbar-Wireless-Full-Range/dp/B07DCP2M3J/ref=sr_1_12?s=electronics&ie=UTF8&qid=1530734556&sr=1-12&keywords=sound+bar

2.36mm
https://www.homedepot.ca/en/home/p.high-impact-acrylic-sheet---093-inch-x-8-inch-x-10-inch.1000126492.html

3mm
https://www.homedepot.ca/en/home/p.clear-acrylic-sheet---118-inch-x-36-inch-x-72-inch.1000126445.html

lowes plastic sheets
https://www.lowes.ca/building-supplies/insulation/plastic-sheeting-film/

homedepot all plastic sheets
https://www.homedepot.com/b/Building-Materials-Glass-Plastic-Sheets/N-5yc1vZbrdg

===
0710
来电话（应该是dealer、老的）询问怎么取12v电，后来发现是otto描述不清、其实其已经很熟悉了、也知道从点烟器也能取电、就只是想从保险丝盒取、问哪根颜色的线是地，回答说不知道、被质疑、回答新来的，后来问luke、说是保险丝盒里全是火线没有地线。。说保险丝盒放地线没意义
后来发现产品手册中、并没有所谓在保险丝盒里的12v供电、所有的保险丝几乎都是串在用电器上、并没有和地线相联系的保险丝。后来猜测可能是用户手册中那个“12v accessory plug”的图中文字让这帮老外误会了、其实这个是指全部的受DC-DC转换器照顾的12v用电器组成的总系统。。的保险丝。。

并联串联：parallel & series circuits

新的技术问题：电刹（应该是叫mechanicalBrake）改油刹（hydraulicBrake）、以及一些技术细节&fact
===
0713
装车（hobbit 4+2）：
- 装轮子之前可先装上前bumper、方向盘柱。。最好叉车开局托到半高。
后面的可先上（for Zephyr：）尾踏板安装座（两块铁）、尾踏板、后bumper
- bumper：所有的bumper--乃至所有的安装都应注意、一开始不用上的太紧、后面还得调位置呢、向这个bumper其实开的是长条形的螺丝孔方便调位置、上次我们都装好了结果发现位置不对还在埋怨结果发现其实他们考虑到这个了、是可以调节的。。
- 方向盘柱（及方向盘柱至前桥方向机的连接）：安方向盘柱时理一下线下面的线、方向盘柱不应该压迫到那些线、他有一个三角形的豁口
- 安轮子：主要就是螺丝如果不对劲--例如格外发涩这次--其实可以换个螺母再打
- 中部座椅：椅背不需重新打孔直接用就行
- 尾踏板：hobbit 4+2需要安装尾部那个口字型支架（需要拆充电器、并需注意安装方向是L型底边朝前）。
- 椅背、朝后座椅的椅背：hobbit 4+2只有那个“朝后座椅的椅背”需要custom打孔、其他的椅背的预留孔都是准确的、ok的。注意角铁的位置是底边和椅背的底边对齐、角铁尽量往中间的方向靠拢来贴住边
- 组装朝后座椅的椅背+顶棚后立柱：大组合时先安下面的螺丝、并且先用钻把螺丝打进去（固定底座+朝后椅背）的组合、打到底后再把立柱从内侧套进去、最后再上上面的螺丝、不好上的话注意往前扳一下前面这个椅背
- 后立柱中部横杆：hobbit 4+2自带的通常用不了。。要再去备件找。。这种杆的长度居然不是同一的。。千奇百怪。。
- A柱（以及侧后视镜）：侧后视镜L铁片的打孔、注意顾好一个孔就OK、另一个可以都打上螺丝之后比着打
- 顶棚：
-
===
Email hosting & website hosting相关：
- server info: IMAP
just36.justhost.com
===
新需求--claire：
- 自选颜色
- 首页放上summer promote - upgrade package
下一步：promo部分下面的横向滚动菜单现在指向的anchor不对。。要改回来！
- 改contact us表单的aaron相关的部分收信人改为claire
- 需要拍照！车衣、后视镜和黑色座椅
- vacuum on Friday
===
0803
新需求--新proj（销售统计byClaire）
- 好像貌似车的库存数量一直是个难以获得的数据
- 特点：希望能有个功能--每选择一个column就能自动改变chart、纵坐标是新的column、横坐标仍然保持不变是随时间。
- 是个proj了，太复杂了所以希望有个系统
- 除了那个两条线的、其他的图老板反映看不懂、“要是只有两条线这样的就好多了”。。（但那样就无法在同一张图同时显示按月和按季度）
- 同样是按月和按季度这种图、缺少对季度部分的图例、只有对月的
- 因为是所有表都在同一个sheet，所有的filter啊sort啊等功能对很多表都用不了。。
- chart等缺少sort
- 另外还可再加个search、尽管excel本身也能search了。。
- 问题！：但这个系统想要persuade让允许开发还有许多问题，例如只有她一个人用得上这个系统、系统的再用率、重复使用率也受到影响、回报率也很一般

以前John提到的新proj--那个masterList表

下一步：把这个为啥具体车的页面无法加载css、img的问题解决他。。
===
0808
装车：
- hobbit的后bumper，那4个青铜紧固螺丝一开始不要上紧，以便安装另一个。
- 横杆只有两种，一种是短的，就只有一种长度，另一种长的，可能有多种不同长度，短的这个可以给zephyer2+2上，但一般来说都会过短、需要捆带辅助强制拉近两个竖杆的距离来安装
- 安装zephyer的塑料侧裙，要想不让那个圣诞树插销报废掉、最好的方法就是打好他的孔，只要孔购大购清楚、磨刀不误砍柴工。。
- zephyer安装前部时的车灯装法：先3项那个灯，然后同为2项的那两个灯、大号的就是大灯、小号的就是转向灯。。
-

- 第二短的 backseat：foldable backseat的那4颗固定螺丝，原来用的不是最短的螺丝（尽管只需要连接两片铁板）而是第二短的，可能是两块铁板略厚、东西略多把。。
- hobbit的rear bumper，安装不需拆尾踏板或其他也基本没啥顺序要求、用4颗青铜螺丝连中间那四个孔、且最中间的两个是短的，就还是遵循“配啥用啥”的原则，螺丝需要伸进去挺多才能开始钻、所以主要靠视觉一开始找对那几个孔的位置、用螺丝钻“承载住”螺丝稳步向前、最后用钻向前压紧、感受到螺纹再往前打。。！注意、要点就是不要一上来就打死。。而是逐一推进、均衡之后再推进。。两侧的两个固定螺丝是m6十字的、最短的
- 螺丝长度及垫片——后面这一堆：
     最短的两颗：连接底座和充电器处的方形支架的（螺丝横置）
     第二短的*4：foldable backseat的面板
     扶手：用40或45的、具体哪个不一定、虽然现在常配给45了，一般靠前的2个较短、中间的45更好、底下的（zephyr用短螺丝、hobbit用最长的65的）
     尾巴：不能太短、貌似45的最好
     垫片方面、主要是foldable backseat的面板那4个要用大的、zephyer的踏板的底下的4颗固定螺丝要用大的、其他的都小的就行、螺丝也都是自锁为主。。
- zephyr尾踏板底下支撑铁的安装、误差与空间不够
- zephyr的下巴、原来要单独取
- hobbit和zephyr的大椅子（电池上面的盖椅）的区别
- 安装带信号灯侧后视镜的标准程序
安装5panel中后视镜的标准程序《--固定支架铁片可用40mm普通M6螺丝、但需要配合一组弹簧+小垫片加在螺帽处、下面就用小垫片+弹簧+圆头螺帽固定就行、基本不会冲突了。。
安装运动方向盘的标准程序
- 安装带后斗（短后斗）车的标准程序
- zephyr2+2的后面的candle bar，如果是后面要装塑料顶棚的话（一般都是装塑料的），先不能装这个bar要不下面太宽上面太窄顶棚装不上。。
- 装中后视镜的固定铁片时，稀里糊涂错把45mm的螺丝当成40的用了、还怪螺丝太长、框架太窄。。
- windshields: 2028 -- hobbit（需配长夹子）; 043 -- zephyr（需配短夹子）；041 -- 所有的小棚的车型、例如zephyr的2g、zephyr的带后斗车型。。
- 换座椅椅面（换黑色座椅时用得到）：椅背的，需放在地上压着、把椅面整个吃进去。尾座的，要看一下是否平。
- 装双椅背（rear roof support处的）（zephyr的）：2+2的确实可以用原来的孔了，但但是——偏后面这个椅背（朝后的这个较高的）仍要重新打孔、铁的上缘和椅背长槽的上面这个边对齐。。横坐标就只中间偏外即可。。、
- zephyr4+2：其rear roof support是要用朝前的！而非一般常见的那种上面朝后弯的。。
- 费时间者：zephyr2+2的顶棚如果用塑料的100%会出现横杆太长的问题。。挑横杆挑了一大顿才发现只有这个长度或者短得多的（其实之前的记录就有）、长的这个必须至少两个人安装、用脚踩的方式撑开、迅速安装到位，短的则需要捆带
- 费时间者：同样是zephyr2+2的塑料顶棚的问题，固定顶棚的螺丝也会很不好上（就算先不安装横杆），尤其最前面的两个，方法是最先上这两个（如果先上了后面的、也需要全部松掉并卸下螺母、尽量退出螺丝），并且上好第一个后不要打下去、别说螺母了、连螺丝都只要刚刚露出孔来就行、要点就是两个螺丝呈八字形、顶棚尽量抬高、并用长螺丝刀辅助来撬来方便打螺丝
- 费时间者：安装常规车型的尾巴（U型尾部扶手）时发生朝后座椅不能完全打开放平的问题--会刮到尾巴--的解决办法：
都知道要垫垫片了、具体怎么垫？还是要把尾巴上的螺丝都松开、然后把椅子打开放平、看一下具体差多少再在需要的位置垫上垫片。。
- 标准程序：出车（container pickup）：千万记住照相！带钻，木螺丝，木螺丝的螺丝刀口（一般是方形），备用电池，剪刀透明胶，泡模（用来垫顶棚等等），一定记得带照相的
- upgradePackage：方向盘的小内六角螺丝太容易滑牙！千万注意内六角的牙（扣）是可以说最脆弱的了、很容易就磨成圆形。。偏偏他这个安装孔不好安、螺孔更是常发生。。解决方法是，拧不动了就千万别勉强了、改攻丝吧。。万一真的拧到滑牙了、就用自锁钳子夹住旋出来（其他取出的办法还有焊个小螺丝拧出来、用金属胶粘个小螺丝、用挫挫螺帽的边缘挫出个小平面用钳子拧、用小砂轮打出个一字槽然后拧出来），再然后（关键）千万别在继续用新螺丝往里拧了、还是先攻丝再说、既然都能滑牙肯定哪儿卡住了
- 难题处理--轮毂上的螺丝（基础螺丝）是歪的。。
难题处理--前顶棚支柱螺丝孔滑丝的处理（攻丝）
- 高阶任务--装电煞
-
===
0813
新任务：
- 现在的promo，送的运动方向盘，能不能把中间那个“type R”字样去掉？
现在的结构、解决1（自制圆形透明片）、解决2（直接喷漆）
===
太毛躁了。。当然最主要的是（刚才完全秒睡了。。）睡眠不足、坚持者等问题

0814 控制器事件！

- 后续：DC-DC保险丝位置、装法、控制器保险丝、
===
0821
John谈话（及之前的重要的）：
- backseat尾部座椅的扶手的螺丝——切记打的时候一定看着！螺丝正面接触面是否变形！
打其他的螺丝、甚至其他的操作也都得注意、一直观察着是否会发生什么问题！
- 换后部车身的外壳、记得流程包括了拆下充电插座和充电指示LED、并且拆充电插座的方法是要从后面解开充电线的接插件并把线拉过去、可能需要拆绑带。。
- front support of roof（顶棚的前支柱）的安装——记得偏上的螺丝要换成长一些的（65->70）！、并准备好自锁螺母和垫片在安装时
- John谈话——精进装车、最主要的是一定不能忘了已经教的事情！。。做好记录！
- John谈话——要有主见、有什么想法或无法服从命令时要学会拒绝、并作出合理的解释、例如“（更大的领导）已经要求我这么这么做了”、“我这是听XXX的”
- 承接上面一条、即是一定注意命令接口、不能越级、也不能不按标准汇报流程走、例如不能直接服从非直属或负责领导的人员的命令、而应一定先再汇报一下直属or负责的领导
- 不要怕麻烦、需要问一下的一定要问
===
0910
存在的意义--小的总结：一个重要的问题是当时虽然都吭哧瘪肚的弄完了，但presentation和documentation都做的很不好。。
===
0911
昨天又犯了个小错误（造成经济损失至少50）--给改装件带杯架的扶手刷防水涂料时，忘了给正面侧面的皮革部分保护起来了。。结果虽然涂的时候很小心没有粘上皮革，但涂料还是不知从哪儿流下去了，淌到了背朝下的皮革部分。。后来就难到没办法修复了。。要是第一时间用水擦还行、后来连用那个不怎么好用的香蕉水都擦不掉。。

标准程序：
===
1022
upgrade package temp：
===
1023
待购：
鳄鱼夹
===
1210:
Shopify:

Pricing——27、79、299USD per month's difference:
- Staff accounts 2->5
- gift cards、
- reports
- shipping rates calculating (whether 3rd party rates calculator)
- shipping discount: 31-37-40%
- Credit card fee:
Canadian credit card                         2.9% + 30￠     2.7% + 30￠     2.4% + 30￠
International/Amex credit card          3.5% + 30￠     3.4% + 30￠     3.3% + 30￠
Additional fees using payments other than Shopify Payments             2.0%     1.0%     0.5%
- POS

NewProduct
- SKU&barcode
- pics
- weight (for shipping)
===
===
1.平台比较Platform comparision
2.平台售价
3.大致需要的参数
4.需要确定的参数、也包括需要出售的商品
5.需要做的工作与分工
6.时间线的估计

1.平台比较：
- Shopify
- Magento
太臃肿、功能过多用不上、运行速度慢、安装配置繁琐、bug多、成功率太低
- Opencart
- Sylius
- GoDaddy
和shopify一样是闭源的、但功能要少很多、有点儿太简单

开源的好处都有啥？
- 可以和仓库系统整合、大大减轻工作量、提高效率（否则不仅每次添加新商品需要一个一个手动录入、就是商品的库存产生变化也要一个一个手动录入和核对）
- 页面想改就改、自由度更高
- 成本更低、虽然仍需hosting、但在我们的这个情形其实可以用原有的hosting等于没有月费

2.
shopify monthly fee 39-105-400 CAD
opencart hosting basic12（9） plus17（12）perMonth

3.大致需要的参数：
- Name
- Desc
- Tags 《--
- Model (also named "productCode" in productPage, is the model name with letters and digits)
- SKU/ISBN/...
- Price 《--
- Quantity (remaining qty) 《--
- Dimension 《--
- Weight 《--
- Category 《--
- Manufacturer 《--
- Related product (asso part) 《--
- Option (sub-items with seperate price and qty, variant) 《--
- Images 《--
- *Spec (called "attribute" in system) 《--
- *Tax policy

4.需要确定的参数、也包括需要出售的商品
参数：在上面用“《--”标记


5.需要做的工作与分工
- hosting
*实验怎样隐藏文件夹
- theme、首页美化、其他非商品页面（contactUs、aboutUs等等）
txt和img
- 录入商品
- 采集图像（照相）、desc
- 开会 确定很多参数怎么设 与更多讨论
- 开会 培训员工使用

6.问题 Questions
- 销售的品类。是否所有parts都放上去？  SKU for selling, are all of our parts for sale?
- 库存是否少写一些？（预留一些）  Remaining quantity, do we set a smaller qty (so that to spare a little more for our own consumption)?
- 价格 Which price to list? wholesale or retail?
- 有哪些信息是不能放上去的 / 要小心的？

7. 时间线：上线大概需要1、2周，开发完需要2、3周
调研
config、modify & dataEntry
dev to migration function etc

*7.shopify的商品参数：
- Title
- Desc
- Price(final)
- Price(compare at) (cross out price)
- Price(cost)
- SKU
- Barcode etc.
- Qty
- Weight
- Variant系统（和option系统类似）
- Collection, type和tags （和category有点儿像）
===
1.平台比较Platform comparision
2.平台售价
3.大致需要的参数
4.需要确定的参数、也包括需要出售的商品
5.需要做的工作与分工
6.时间线的估计

1.平台比较：
- Shopify
- Magento
太臃肿、功能过多用不上、运行速度慢、安装配置繁琐、bug多、成功率太低
- Opencart
- Sylius
- GoDaddy
和shopify一样是闭源的、但功能要少很多、有点儿太简单

开源的好处都有啥？
- 可以和仓库系统整合、大大减轻工作量、提高效率（否则不仅每次添加新商品需要一个一个手动录入、就是商品的库存产生变化也要一个一个手动录入和核对）
- 页面想改就改、自由度更高
- 成本更低、虽然仍需hosting、但在我们的这个情形其实可以用原有的hosting等于没有月费

2.
shopify 39-105-400 CAD
others free

3.大致需要的参数：
- Name
- Desc
- Tags 《--
- Model (also named "productCode" in productPage, is the model name with letters and digits)
- SKU/ISBN/...
- Price 《--
- Quantity (remaining qty) 《--
- Dimension 《--
- Weight 《--
- Category 《--
- Manufacturer 《--
- Related product (asso part) 《--
- Option (sub-items with seperate price and qty) 《--
- Images 《--
- *Spec (called "attribute" in system) 《--
- *Tax policy

4.需要确定的参数、也包括需要出售的商品
参数：


5.需要做的工作与分工
- hosting
    *实验怎样隐藏文件夹
- theme、首页美化、其他非商品页面（contactUs、aboutUs等等）
txt和img
- 录入商品
- 采集图像（照相）
- 开会 确定很多参数怎么设 与更多讨论
- 开会 培训员工使用

*6.shopify的商品参数：
- Title
- Desc
- Price(final)
- Price(compare at) (cross out price)
- Price(cost)
- SKU
- Barcode etc.
- Qty
- Weight
- Variant系统（和option系统类似）
- Collection, type和tags （和category有点儿像）
===
Magento php.ini (opencart 也用得上)：
php.ini settings for magento (other opensource platform also benefit)

has to be php7, below all in php.ini in php7
extension_dir = C:/xampp/php7/ext
extension=php_gd2.dll
extension=php_intl.dll
extension=php_xsl.dll
extension=php_openssl.dll
extension=php_curl.dll
extension=php_mbstring.dll
extension=php_pdo_mysql.dll
extension=php_soap.dll

http://localhost:8056/magento_local/
admin_1wcorj

all the "advanced options" in the step 3 web config..

agtecars
admin1
jasonzhang5195@gmail.com

; max_execution_time = 30  zz
max_execution_time = 360000

; max_input_time = 60 zz
max_input_time = 18000

; memory_limit = 128M zz
memory_limit = 1024M

agtEcars123
===
Learn opencart:

ctrl flow front-end:
index.php (/index.php or admin/index.php --front or backend)
    include config.php (all the CONST) (/config.php or admin/config.php --front or backend)
    include startup.php (same for both front&back: system/startup.php)
        error_report, checkPHPVer, check SSL, timezone etc.
        define modification function(see note1) <<--1
        include auto-load file(see note2) <<--2
        define library function for autoload(see note3) <<--3
        call PHP spl_autoload_xx() to do the php autoload for library <<--4
        include engine files(using modi func to get cache ver file if possible)
        include helper files(no modi masking any more just direct include)
        define start() (which just include framework.php) (same for both front&back: system/framework.php)
    run the start() function(including mentioned framework.php), pass which module to run (backend or frontend)
        instansiate Registry obj (just an assoc array and its get/set)
        instansiate Config obj (same as registry, just add a load func) <<--5
        inject 'default' sysConfig settings
        inject 具体模组's（admin或者catalog等等） SYSConfig settings <<--6
        registery the config obj (store it into registry)
        instansiate and register a log obj <<--7
        call PHP set_error_handler(), set its handler and reaction
        instansiate a new event obj and registery it. what is event & action class?<<--8
        register some events into the event obj, these are 'action_event's defined in corresponding sysConfig <<-9
        instansiate  and registry a Loader obj (note: the regi key is 'load' not 'loader')<<-10
        instansiate  and registry a Request obj  <<-11
        instansiate  and registry a Response obj  <<-12


- 1: modification function: 给定一个原始文件的绝对path（一般按分类会在front-end back-end install各自的总文件夹里），会去找storage文件夹的同样子路径的位置是否有这个文件（应该是个copy或者cache）、有的话return这个文件的path、否则return给定的原path（原始文件的path）
- 2: auto-load file: too heavy this file -- not to read at the moment
- 3: 基本上也是个includer、会把输入的叫做$class的变量、里面的'\\'换成'/'，接到library的path中，看library中是否真的有此文件，有的话就用modification func modi一下（也就是用storage中的cache替换一下如果可以的话）、再include这个library文件，是在找不到的话就return false。。
- 4: PHP的autoload功能：基本就是帮忙include Class的，可以通过只class名就自动include定义class的源文件（从而载入这个class），用法是首先定义个针对某类class的search path、上面note3的这个library正是干这个的、再用spl_autoload相关工具链到自动加载功能里（？）从而下次就不用include了（？）
- 5: load func: 将这个SYSConfig文件里的诸fields(诸arrayElement) append至本config obj的'data' array ppty中。。如果出现fieldName重名则将原本的覆盖。。 inEnglish load this sysConfig file (auto-complete the input nature file name and include it.. path=system/config/, extension=php)into config obj, so that inject the file's data into n assoc array which append to  config obj's data
- 6: here $application_config as a nature fileName is prepared in the beginning, very early when index.php is calling function start()
- 7: log file's location is according to 'error_filename' entry of the 'default' sysConfig as its natureName and DIR_LOG of configFile as its path-- usually always storage/logs
- 8: event class: engine的一部分
ppty: $registry(the main registry past to here), $data=array[] (storing a list of events)
methods:
             'register': 3params, str $trigger, actionObj $action, and an int $priority. register an evnt into the 'data' array ppty and sort the whole array by priority.
             'trigger': match the input string 'event' with the existing, stored string 'trigger's for every entry of 'data' property (that is every single event), if a match is found, call the 'execute' method of the action in that entry and return the result
注意一次methodCall是可能trigger多个action的，只要前面的action在exe时return null甚至throwExcept，就都不会发生method中断，下面如果还有相符的entry也能触发。。
              'unregister' and 'clear': if both trigger and action's route match then unset the event entry
or just unset the event entry if just trigger match
- 8': action class: engine的一部分
construct: seems it differentiate the 2 types of route: calling a file & calling a method (for method, seems it only takes the final part of the input $route)《--更新：其实是同一种route--同时包含了ctrlr文件path和method名，同时运用while和array_pop来同时赋给method和找到文件path的方法正是精妙之处（学习）》
     assign $this->route或$this->method accordingly
     assign $this->id to the input $route..
     对输入的route首先是去掉所有除了字母数字和"_"、"/"之外的所有特殊字符，再按"/"炸开成array
execute: 这里仍然没看懂，好像只有对“route”type的应对而没有对“method”的。。虽然下面也用了method但似乎仍会先出excep《--更新：由上面的更新，method和文件path是可同事都有的，在根据这里的代码、看来method名和文件path是肯定都需要的都必须有的，那么ctrlrClass的obj也能顺利生成。再就是下面的reflectionClass，其作用是get这ctrlrClass的megaData来判断是否有此method、param数量等等。最后的call_user_func_array()就是用于动态invoke method和隐藏signature的、一起来完成本次的ctrlrMethod invoking（动态）》

- 9: 'action_event': some events defined in corresponding sysConfig, to pre-load by framework.php during init
     结构 'action_event' = {
     'key1' => {999 => 'action1', 1000 => 'action2'},
     'key2' => {'actionxxxx'},
     'key xxx' => {},
     ...
     }
     assoc array inside assoc array, 其中的数字是priority，key xx和 action xx都是某种具体的str，就是register event时用到的$trigger和$action
     对于这些具体的events还得等到后面都懂了才能分析
- 10: 'Loader' class: engine的一部分，有几个methods：《--注意这个就是我们第一次在ctrlr文件中看到的那个$this->load->xx中的‘load’，是framework里registry obj的预存的loader obj》
     ctrlr($route, $data = array())  《--loader.php 47行这儿没太看懂，怎么同一个route又能给event做trigger又能新建个action做exe？（用作         trigger的变量和constructAction的变量确实有所不同、至少从已知的来看$trigger是类似于key、甚至如wiki所说是个fileLoading或                     methodCalling、但和action的route绝对不同、action这个是具体要执行什么 一般来说都是和event本身两回事的）》
         之所以叫MVC可能就是用于具体MVC class中的methodsCalling的wrapper？
         本method主要就是有个trigger pre events和post events，在中间还有可能直接执行用trigger作为route的action（只要pre们不return东西），虽然pre和post都只各有一次call trigger()，但由于一次trigger是可能触发多个event entry的所以叫pre-events等。trigger str本身也需注意其一定是前缀ctrlr、后缀before或after的
     model($route)  对model的loading有些不同，他首先是把输入的route中所有斜杠改成下划线并加上前缀model_、看registry中是否有这个（也就是看有没有load过），没有的话才会1).找到并include route所代表的那个model文件（在当前模组的model文件夹）、做一个那个model文件中定义的那个model class的一个proxy（用engine中的ProxyClass）（这个modelClass恰好也和route有相似的名字--相当于把斜杠去了加上Model前缀）、并将proxy存入registry。。之所以用proxy据作者说好像是为了override model、而且据说用到了magicMethod
     view($route, $data = array())  view这部分好像和ctrlr有些类似、都会trigger些pre和post events、不同的是ctrlr中间可以直接执行用trigger作为route的action、view这边则是俨然在templating和renderingView的样子。。那个叫‘templateEngine’的，其实就是一个str叫‘twig’。。
另外也同样是只有pre这部分没有return东西才能执行到template这部分、否则直接跳到post了。参数用途--$data可以用来给template传递data（参数）这点和laravel一样非常好用、$route则一般就是template的全path、本来sysConfig可以再设置个templateDirectory不过一般都是为空。
在template在render时还会pass个'templateCache'，是个bool，是指。。
     library($route)  load-library和model有点儿相似、都是include文件和储存文件中class于registry，不同之处在于library不用check是否已经registry了（是否曾经发生过load）、再一个是不需proxy、再一个是对应class的命名也略有不同（没有前缀而且route如果有子目录还要用\来代替route的/出现在class名中？）
     helper($route)  非常简单直接include文件
     config($route)
     language($route, $key = '')
     callback($registry, $route)  (这个是protect method)
- 10': overLoading & magicMethods in PHP: 这部分是PHP自带的、其解释了一些我们原本不理解的关键的地方
似乎就是能够自动的生成ppty、不需手动定义所有ppty名、只要定义个叫‘data’的assoc array、以及（关键）一些叫'__get' '__set'之类的methods，则不论定义生成ppty还是access ppty都可自动完成。。连assoc array的extract()都省了。。
知道了这个之后，那么多的'$this->load->xx'就好解释了。。这个load其实就是定义在framework里的总registry obj里的总loader obj
- 11: Request Class：
就只有$get, $post, $cookies, $files, $server几个ppty和一个clean() method,
这几个正是常见的$_GET[]等等、在construct时就pull下来set好了，所以$_GET['xx']应该可以直接用$get['xx']代替
不同之处在于设定时用了那个clean方法、好像是把所有的key、value都改成——特殊字符要进行html化、例如'>'改成‘&gt;’之类
- 12：Response Class：mainly for setting http header (note: not html head) & wrap returned rendered html code (http body). 另外在framework init 这个response时也add a common httpHeader (COntent-type etc) and set gzip compress level (这边没看懂，好像实际没有set成功，没有这个config。。)
fields:     headers(array)-- every element is a http 'header' and all consist the "http headers" which will be send to client with response, "http headers" includes additional info server gives to client such as content-type or redirect-new-location(use 'location').
            level(int)-- level for compression (encoding) for gzip tool, 0-9 0=nonCompress
            output(str) -- final response output
methods:    addHeader($header)-- add a header to headers array
            redirect() -- use the 'location' header to redirect, some html chars (&amp;等等）in entered string are cleaned, also can explicitly set return status (with a default 302 standard redirect)
            setCompression() -- set ppty 'level' for later compression
            output getter & setter--
            compress() -- a private method to do the compression, using gzip to compress the input data (即output)
            output() -- return final response to client (like a html code wrapper to play with httpHeaders), will use compress() to compress $output (即httpBody), also send the headers first.
- DB Class & Mysqli (adapter) Class: DB Class is just a wrapper, or interface kind of. All real functions stored inside adapter classes, based on what kind of DB is used (mysqli mysqlpdo prestoSomething ...)
By default mysqli is used for most pages, this is set in 'db_engine' in many configs.
MySQLliClass: (DB Class has same name methods..)
ppty:    $connection -- private
methods: constructer --
         query(sql) --
         escape(sql) --
         countAffected() --
         getLastId() --
         conenected() --
         desctructer --



Learning - opencartGithubWiki - Basics, Events, Events 2.0&2.1
- MVC: seems the author made models only for database related and put the logics in ctrlers (好像model只负责data和database、而logics在ctrler中)
- Loading: 2ways to access ctrler, path matching, "code loading"
- event: seems the authors logic is to use events as a way to add some code when events such as method calls and data flows happening, hooks to call before/after events happen, manipulate input/output
- event registering:
    "$code": string id for the extension,usually "authorName_extName", 据说在用户删除插件时用得上、来删除event
     "$trigger": a flexible call, can be made to ctrler or model, view, or language or config file etc many things.
         看起来event就是由fileLoading或者methodCalling作为其trigger的，如上所述这么些file或者method都可以、而$trigger就是记录具体触发者的一个string。。
         trigger可由很多部分组成 application、type、folder、file、method、beforeOrAfter
         其中application指的是catalog还是admin、type指的是(M还是V还是C、L还是Config等等) 、method指的是（主要是ctrler和model用method、其中model一定要用到method）、beforeOrAfter指的是（相对于这些file的load或methodCall，event的触发位置）
     "$action": 具体的action一般放在某个ctrlr中、这些具体的代码可用来处理route、data、loadMVC等，而actionObj（也就是这个$action）就是提供链至这具体action代码的route的——route放在actionObj的constructor中（但在3.x中好像这个route也是要pass过去的。。还是得看具体是怎么用的）
- event deleting:
$this->model_setting_event->deleteEvent('my_theme');
不知为何他经常提到用户自建extension、这里的eventDeleting也是讲“在你uninstall你的module时需要delete所有regitered events”
- event using:
在具体使用上他只提到一个、具体action是可以return data的、如果returnData “it will stop any other event actions that are set to be called”。。
而似乎action还可以有两个输入：route指定具体的action ctrlr的位置（？）、还有个data

note(总):
- nature name = name without path and fileExtension etc.. short name
- sysConfig file= system/config/xx.php (inject or append给Config obj的，也是一些setting但通过obj ppty array的形式)
config file= admin/config.php或者/config.php (拿来直接就用的、里面有一些CONST)
- register vs registery
register是Event class的一个method，用来装载一个具体event至Event obj的event列表（也就是其‘data’ ppty）
registry 是另一个class ‘Registry’或其obj，就只有一个array ppty，用来一条一条的储存framework里各个主要的功能模块（功能objs）
- string中常出现的'\\'，例如 “$class = 'DB\\' . $adaptor;”，其实就是用来生成和标注path的，向这里的$class代表的就是‘DB/adaptor’这个含路径的文件名str。另外就是用到了下面的：
- PHP auto class naming

temp：
(base on front-end or back-end)

TODO
看完loader、再看一些tutorial文章、然后还需要实际动动手了theme啊小的实验啊等等
===
- 总结：
    - 一个就是文件path系统、对绝对path的manipulate
    - 一个是怎样load（include）和管理这些class和文件
===
工作：
- 随时实际使用系统、来熟悉、并发现尚未发现的问题
- 随时继续hack系统、读代码
     - 看官方YouTube那个create ext的、以及其他create ext、create theme
     - 读文章、还有好多待看的呢


- 试着改一改原theme或自制扩展theme包（尽量少花时间）
- 使用 成品theme
  着手修改成品theme为最终版本（关键）
  整理需要的资源的需求
- 安装payment和shipping
- 上传服务器（time consuming）
- 购买 安装"Different Prices By User Groups" 扩展包 《--从这里开始已转去"agtPOSS ..."笔记》
===
upgradePackage

- Invoice
    - Final price
    - Lead time
    - Formal, company name, address
- Delivery method
- Shipping cost
- minimum quantity
- Payment method
- Technical data
- Pre-production kit (esp. what to buy..)

Components
- Speaker
- Speaker Support Structure (metal box, metal bracket, shrunk tube...)
- USB Plug <-
- Switches <-
- Volt Meter <-
- Panel
- Others: WireTrunking(~20 per2cart), Paint(~7 per1cart), Wires, Screws,
- *Mirror Middle 22
- *Mirror Side 29
- *Steering Wheel & Adaptor 11 & 5
- *Black Seats
- *Enclosure
- *Armrest

- confirm: dimesionWeight, usb, shippingCost, invoice, volt meter

问otto：paypal的手续费、跟箱、speaker数量运费


